/**
 * Created by CCNE on 25/07/2019.
 */
public class Circle extends Shape {
    protected double radius;
     public Circle(){

    }

    public Circle(double radius){
        this.radius = radius;
    }

    public Circle(double radius,String color, boolean filled) {

        super(color, filled);
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        this.radius = radius;
    }

    public double getArea(){
        return PI*getRadius()*getRadius();
    }

    public double getPerimeter(){
        return 2*PI*getRadius();
    }

    @Override
    public String toString() {
        return "Circle[radius="+getRadius()+
                ",color="+getColor()+
                ",filled="+isFilled()+"]";
    }
}

/**
 * Created by CCNE on 25/07/2019.
 */
public class Rectangle extends Shape {
    protected double width;
    protected double length;

    public Rectangle(){

    }

    public Rectangle(double width, double length) {
        this.width = width;
        this.length = length;
    }

    public Rectangle(double width, double length,String color, boolean filled ) {
        super(color, filled);
        this.width = width;
        this.length = length;
    }

    public double getWidth() {
        return width;
    }

    public void setWidth(double width) {
        this.width = width;
    }

    public double getLength() {
        return length;
    }

    public void setLength(double length) {
        this.length = length;
    }

    @Override
    public double getArea() {
        return getLength()*getWidth();
    }

    @Override
    public double getPerimeter() {
        return 2*(getLength()+getWidth());
    }

    @Override
    public String toString() {
        return "Rectangle[width="+getWidth()+
                ",length="+getLength()+
                ",color="+getColor()+
                ",filled="+isFilled()+"]";
    }
}

/**
 * Created by CCNE on 25/07/2019.
 */
public abstract class Shape {

    protected final double PI = Math.PI;
    protected String color;
    protected boolean filled;

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public boolean isFilled() {
        return filled;
    }

    public void setFilled(boolean filled) {
        this.filled = filled;
    }

    public Shape(String color, boolean filled) {

        this.color = color;
        this.filled = filled;
    }

    public Shape() {

    }

     public abstract double getArea();

    public abstract double getPerimeter();

    @Override
    public String toString() {
        return "Shape[color="+getColor()+",filled="+isFilled()+"]";
    }


}

/**
 * Created by CCNE on 25/07/2019.
 */
public class Square extends Rectangle {
    public Square() {
    }

    public Square(double side) {
       super(side,side);
    }

    public Square( double side, String color, boolean filled) {
        super(side,side,color, filled);
    }

    public void setSide(double side){
        setWidth(side);
        setLength(side);
    }

    public void setWidth(double side ){
       setWidth(side);
    }

    public void setLength(double side){
        setLength(side);
    }

    public double getSide(){
        return getLength();
    }

    @Override
    public String toString() {
        return "Square[side="+getSide()+
                ",color="+getColor()+
                ",filled="+isFilled()+"]";
    }

}
